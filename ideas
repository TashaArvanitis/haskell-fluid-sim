IDEAS
---

1. Semi-lagrangian advection
2. Gravity and body forces
3. Project


Advection: Dq/Dt = 0 --> pu/pt = - u . grad u
    MAC grid
        velocities on faces
        pressures at the center
    Advect velocities:
        input: 
            size of grid
            velocity components on grid faces
        output:
            new velocity components on grid faces
        keep 2 copies of grid faces velocity components, so we reuse memory
            switch back and forth between which one is in and which one is outpt

    Algorithm: (using RK2) 
    For each face in the grid:
        Let x be the position in 3-space of the face center
        1. x_mid = x - 0.5 dt u(x)
            u(x) needs to be interpolated from other faces, see page 24 for ugly things
        2. x_prev = x - dt u(x_mid)
            u(x_mid) needs to be *fully* interpolated, not like previous one
        3. u'(x) = u(x_prev)
            but we only need to interpolate the component that needs to be on this face

    Boundaries:
        If x_prev is not in fluid, then several cases:
            - If it's a source or a sink (???) or just steady air, we know the velocity.
            - If we don't know velocity, project onto nearest grid point and interpolate value.

Body Forces:
  for each cell, choose faces which have z components
      (or components along other body forces? wind?)
  u_z' = u_z Â± dt * g (sign depending on coordinate axes)

Project:
    Basic idea:
        Set up the system of equations
        Use preconditioned conjugate gradient
        (We could start with regular CG first?)

    System of equations:
        Ap = b (b = divergences + modifications for boundaries)
        How to compute b:
            b = - divergence u + adjustments for solid boundaries
            divergence = just normal discretized divergence using mac grid
            adjustments = sum over (u - u_solid)/dx for each face that is a solid boundary
            (see page 49)
        How to compute A:
            A is symmetric
            Rows correspond to cells
            So for each cell, we store:
                A_diag: n_{i, j, k} = # of fluid or air neighbors
                Also A in all "positive" directions (only need 3 directions for 3d)
                Those correspond to pressure components for neighbor cells
                    -1 if fluid
                    0 if air
                    0 if solid
            Also! All elements of A are scaled by dt / (rho * dx^2)

    Conjugate gradient:
        Apply CG as normal?
        PCG: see page 55
        keep going until iteration limit or convergence (based on calculating divergence)
            divergence remaining = residual vector
            so convergence is tested via infinite norm of residual vector
                

OLD IDEAS (marching cubes, etc)
-----------------------------

triangle - which cube, which points within cube

look at potential mergees... 
output what it should merge with? 

assign vertex numbers, then delete vertices

avoiding duplicates?


Each vertex has a thread - look at previous vertices

kernel gets vertex to look at and that's it?
  return either -1 (or its own index?) or index of the vertex it is equivalent
  to/vertex that replaces it

  Arguments:
  - Its own index (index of the vertex in question)
  - Index of the cube it's operating on
  - Pass in array of cube starting positions (monotonically increasing)
  - Array of vertices (float3s or some such nonsense)


Each vertex looks at 4 total cubes
Local coords:
  two are 0 or 1, one is between 0 and 1
pass which edge each vertex is on in its local cube?



----------------------------------

each thread: Compare vertex to a triangle
- nicely gpu-able

Nice way to find the four cubes we care about for each vertex?

----------------------------------

Arguments:
  - Its own index (index of the vertex in question)
  - Index of the cube it's operating on
  - Pass in array of cube starting positions (monotonically increasing)
  - Array of vertices (float3s or some such nonsense)

Each thread looks at the pairwise equality of 

-- Which cubes to check
0  0  0
-1 0  0
-1 -1 0
0 -1  0
-1 0 -1
0 -1 -1
0  0 -1

Kernel 1:
  Arguments:
    Work group: vertex index
    - The cube indices of all vertices
    - The starting indices (in the vert array) of all cubes
        - can get # of tris from next cube over
  Outputs:
    - output how many vertices 


-------------------------
Args:
  - for each vertex we get which edge its on
  - cube indices of all vertices

  get the 4 relevant cube index offsets (via a table) (including yourself)
    and get which edge of each cube we need to look at (also via table)

-----------------------------
Kernel: removeDuplicates
Arguments:
  1. Edges on which the vertices lie
  2. Cube id in which the vertices lie
  3. For each cube id, starting index of cube's vertices
  4. Cube indices of each cube

Outputs:
  Which vertex to replace this one with (or -1? or its own index?)

How:
  1. Use edge to get 4 relevant cube directions (new table)
  2. Map cube directions to cube ids via addition and gridPosition.
  3. For each of those 4:
      - get the cube index
      - get the edge of that cube that we care about (new table)
      - based on cube index, get index of 1st vertex on the cube on that
        edge, or -1 if it doesn't exist
        (make this table out of triTable)
      - compute total vertex index: output of table + starting index of
        cube's vertices. if -1 in table, use the vertex's own id.
  4. Find minimum of the existing total vertex indices. That is the output.

How to make table:
  - indexed by: cube index, edge number
  - value: smallest index (in the cube) of vertices on that edge

  ex:
	 triTable[3]: {1, 8, 3, 9, 8, 1, X, X, X, X, X, X, X, X, X, X    },
   result[3][1] = 0
   result[3][8] = 1
   result[3][3] = 2
   result[3][*] = -1 // others

